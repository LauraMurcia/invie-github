control de versiones : Registra ambios en archivos.

Tipos:

local 		 	-> Depende de donde se esté manejando
Centralizado 	-> Depende del server donde se almacena el repositorio
Distribuido		-> Git.

VCS version control system

COMANDOS TERMINAL

mkdir 	crear carpeta
touch 	crear archivos
rm 		borrar archivos
rm -rf 	borrar carpetas
clear	limpiar
ls		listar

vim - editor de archivos
esc + :wq para grabar en archivo

git config -global user.email laura....
git config -global user "Laura Murcia"


git init 					inicializa repositorio
git status					ver estado (en rojo solo está en el working directory)
git add[archivo] 			Nos agrega al archivo al staging area
git rm --cached [archivo] 	Saca archivo de staging area
git add - A 				Agrega todos los archivos listos en workind directory a staging area
git rm -f [archivo]			Borra archivo definitivamente 
git add -n [Archivo]		No hace nada
git commit -m ["mensaje"]	pasa archivos de staging area a git repository
git commit --amend			concatena nuevos cambios con anteriores
git log						visualiza historial de commits realizados
git log --oneline			Resumen de commits realizados
git log --oneline --graph	Nos mostraria los diferentes commits en las ramas o bifurcaciones con un asterisco.
git log -[x]        		x : cantidad de commmits a ver
git diff [SHA]				al sha se obtiene al hacer git log --oneline ej:8db3310, Nos muestra las cambios de ese commits
git diff [XXX-1] [XXX-2]    Muestra las diferencias del commit [XXX-1] contra el commit [XXX-2]
git reset --soft [sha-1]	[sha-1] desde que commit quitar cambios. Deja los archivos en el staging area, listos para hacer un commit.
git reset --mixed [sha-1] 	Quita archivos del stagins area y los deja en el working
git reset --hard [sha1]		 Nos elimina los cambios incluso del working directory, es el más peligroso de todos porque podemos perder parte de nuestro trabajo.
git config --global core.editor"code --wait"	configurar Visual code como editor de mensaje del commit
git config --global -e
git branch [nombre]			Crear rama
git branch -l 				Listar ramas
git branch -d [nombre]		Borrar rama
git branch -D [nombre]		Forzar borrado de rama cuando esta tiene cambios no mezclados
git branch -m [Rama_a_renombrar] [nombre_final]	Renombrar rama
git checkout [nombre_rama]	Mover a esa rama
git checkout [SHA]			Moverse en el tiempo a ese commmit sin borrar archivos
git checkout -b [nombre_rama]	Crear rama y navegar a ella
git merge [rama_a_mezclar]  Se debe estar en rama definitiva




